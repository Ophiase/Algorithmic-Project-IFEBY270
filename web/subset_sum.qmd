---
title: SubSet Sum
---

## Code

Let $S$ be a python set of integers and $M$  the target value.
```python
S = set(<values>)
M = <target_value>
```

To find a solution to the subset sum problem, create a subset and solve it.

```python
problem = SubSet(S, M)
dynamic_solution = problem.solve_dynamic_prog()
LLL_solution = problem.solve_LLL()
```

* Dynamic
    * `solve_dynamic_prog` returns a couple (target, chosen elemements), as if there is no solution to the problem, it will give the closest to the target.\
* LLL
    * solve_LLL returns a vector corresponding to the chosen elements

Alternative constructors :

* Concatenantion : 
    * `SubSet(S + M)`
* Random example : 
    * `SubSet.generate_random_low_density_subset_problem(number_of_elements, density)`
    * If you dont specify parameters, the number of elements will be a random number between 0 and 20, and the density will be 0.5

### Examples

```{python}
#| echo: false
from tests.subset_sum import TestSubSet_Sum
from src.algorithm.knapsack.subset_sum import SubSet
```
```{python}
problem = SubSet([23603, 6105, 5851, 19660, 8398, 8545, 14712], 37760)

dynamic_solution = problem.solve_dynamic_prog()
LLL_solution = problem.solve_LLL()
```
```{python}
#| echo: false

print(f"Dynamic solution : {dynamic_solution}")
print(f"LLL solution : {LLL_solution}")
```

---
title: Nash Equilibrium
---

## Introduction

In game theory we consider two rational agents $x$ and $y$ that both want to maximize their score. \
In discrete cases, $x$ has $m$ possible actions, $y$ has n possible actions. 

If $x$ and $y$ play simultaneously, we can considers the matrices $A$ and $B$ of dimension $(m,n)$. \
$A_{i,j}$ and $B_{i, j}$ represents respectivily the score of $x$ and $y$ when $x$ plays his $i$-th action and $y$ his $j$-th action.

For convenience, we will also call player $x$ as $a$, and $y$ as $b$.

### <ins>Definition</ins> Stochastic vector and Strategie
Let $v$ a vector. If $\sum v_i = 1$ and $\forall i, v_i \geq 0$, $v$ is a stochastic vector.

We call the strategy of the player $x$ and $y$, the stochastic vectors $x$, $y$ that represents the probabilty of choosing each actions.
If only one coefficient of a strategy is none negative (ie. equal to one), we call it a pure strategy.

A best strategy $\overline v$ is a strategy that maximise the gain of its player : \

* $\overline x \in \arg \max_x x A y^t$
* $\overline y \in \arg \max_x x B y^t$

<ins>Propertie :</ins> A best strategy is always of convex combination of pure strategies.

### <ins>Definition</ins> Zero-sum game 
If $B = -A$, which means every gain for $x$ is a loss of the same amplitutde to $y$, and the other way around.


### <ins>Definition</ins> Nash equilibrium 
A nash equilibrium is a couple $(x, y)$ of strategies, where $x$ and $y$ are both best strategies.

#### <ins>Theorem:</ins> A nash equilibrium always exists.
Remark: If we impose strategies to be pure, the theorem doesn't hold. (eg: paper, rock, scissor)

## Code

To find the nash equilibrium, create a NashEquilibrium object, and solve it.

```python
solution_x, solution_y = NashEquilibrium(A, B).solve()
```

### Examples

```{python, hide_input}
import numpy as np
from src.algorithm.nash_equilibrium.nash_equilibrium import NashEquilibrium
```

```{python, hide}
# Paper Rock Scissor

A = np.array([
    [1,0,-1],
    [0,-1,1],
    [-1,1,0]
])
solution_x, solution_y = NashEquilibrium(A, -A).solve()
print(solution_x, solution_y)
```

```{python, hide}
# Non-zero sum game

A = np.array([[1, 2], [3, 4]]) 
B = np.array([[4, 3], [2, 1]])
solution_x, solution_y = NashEquilibrium(A, B).solve()
print(solution_x, solution_y)
```


## Modelization

We solve this problem using pulp with mixted linear programming (linear + discrete).